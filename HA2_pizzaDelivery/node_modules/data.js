//dependencies
const fs = require('fs');
const jsonparse = require('jsonparse');
const errors = require('errors');



const lib = {};

//base directory of the data folder
const baseDir = `${__dirname}/../.data/`;
const nameFolder = folder => `${baseDir}${folder}/`;
const nameFile = (folder, name) => `${nameFolder(folder)}${name}.json`;

//write

lib.create = function (dir, file, data) {
	return new Promise((resolve, reject) => {

		// create the file for writing (fail if it already exist)
		fs.open(nameFile(dir, file), 'wx', (err, fd) => {
			if (err || !fd) return reject(errors.create(dir).eat(err));

			// write to it
			fs.writeFile(fd, data, err => {
				if (err) return reject(errors.create(dir).eat(err));

				// close it
				fs.close(fd, err => {
					if (err) reject(errors.create(dir).eat(err));
					else resolve();
				});
			})
		});
	});
}

//read with promise
lib.read = function (dir, file) {

	return new Promise(function(resolve, reject) {
		fs.readFile(nameFile(dir, file), 'utf8', (err, data) => {
			if (err || !data) reject(errors.read(dir).eat(err));
			else resolve(jsonparse(data));
		});
	});
}

lib.update = function (dir, file, data) {
	return new Promise(function(resolve, reject) {
		fs.open(nameFile(dir, file), 'r+', (err, fd) => {
			if (err || !fd) return reject(errors.update(dir).eat(err));

			fs.ftruncate(fd, err => {
				if (err) return reject(errors.update(dir).eat(err));

				fs.writeFile(fd, data, err => {
					if (err) return reject(errors.update(dir).eat(err));

					fs.close(fd, err => {
						if (err) reject(errors.update(dir).eat(err));
						else resolve();
					})
				});
			});
		});
	});
}

lib.delete = function (dir, file) {
	return new Promise(function(resolve, reject) {
		fs.unlink(nameFile(dir, file), err => {
			if (err) reject(errors.delete(dir).eat(err));
			resolve();
			// resolve({ok:'OK'});
		});
	});
}


lib.list = function (dir) {
	return new Promise(function(resolve, reject) {
		fs.readdir(nameFolder(dir), (err, data) => {
			if (err || !data || data.length === 0) reject(errors.list(dir).eat(err));
			else resolve(data.map(name => name.replace('.json', '')));
		});
	});
};

module.exports = lib;
