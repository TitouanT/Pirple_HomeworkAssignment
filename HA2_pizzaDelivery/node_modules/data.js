//dependencies
const fs = require('fs');
const jsonparse = require('jsonparse').parse;



const lib = {};

//base directory of the data folder
const baseDir = `${__dirname}/../.data/`;
const nameFolder = folder => `${baseDir}${folder}/`;
const nameFile = (folder, name) => `${nameFolder(folder)}${name}.json`;

//write
// lib.create = (dir, file, data, cb_error) => {
// 	// open the file in write mode
// 	return fs.open(nameFile(dir, file), 'wx', (err, fd) => {
// 		if (err || !fd) return cb_error(err);
//
// 		//write to file and close it
// 		fs.writeFile(fd, data, (err) => {
// 			if (err) return cb_error(err);
//
// 			fs.close(fd, (err) => {
// 				if (err) return cb_error(err);
// 				return cb_error(false);
// 			});
// 		});
// 	});
// };

lib.create = function (dir, file, data) {
	return new Promise((resolve, reject) => {

		// create the file for writing (fail if it already exist)
		fs.open(nameFile(dir, file), 'wx', (err, fd) => {
			if (err || !fd) return reject(err);

			// write to it
			fs.writeFile(fd, data, err => {
				if (err) return reject(err);

				// close it
				fs.close(fd, err => {
					if (err) reject(err);
					else resolve(true);
				});
			})
		});
	});
}

//read
// lib.read = (dir, file, cb) => {
// 	fs.readFile(nameFile(dir, file), 'utf8', (err, data) => {
// 		if (err || !data) cb(err, data);
// 		else cb(err, jsonparse(data));
// 	});
// }

//read with promise
lib.read = function (dir, file) {

	return new Promise(function(resolve, reject) {
		fs.readFile(nameFile(dir, file), 'utf8', (err, data) => {
			if (err || !data) reject(err);
			else resolve(jsonparse(data));
		});
	});
}

// update
// lib.update = (dir, file, data, cb_error) => {
// 	// open file in write mode
// 	fs.open(nameFile(dir, file), 'r+', (err, fd) => {
// 		if (err || !fd) return cb_error(err);
//
// 		fs.ftruncate(fd, (err) => {
// 			if (err) return cb_error(err);
//
// 			fs.writeFile(fd, data, (err) => {
// 				if (err) return cb_error(err);
//
// 				fs.close(fd, (err) => {
// 					if (err) return cb_error(err);
// 					cb_error(false);
// 				})
// 			});
// 		});
// 	});
// };

lib.update = function (dir, file, data) {
	return new Promise(function(resolve, reject) {
		fs.open(nameFile(dir, file), 'r+', (err, fd) => {
			if (err || !fd) return reject(err);

			fs.ftruncate(fd, err => {
				if (err) return reject(err);

				fs.writeFile(fd, data, err => {
					if (err) return reject(err);

					fs.close(fd, err => {
						if (err) reject(err);
						else resolve(true);
					})
				});
			});
		});
	});
}

//delete
// lib.delete = (dir, file, cb_error) => {
// 	//unlink file
// 	fs.unlink(nameFile(dir, file), (err) => {
// 		if (err) return cb_error(err);
// 		cb_error(false);
// 	});
// };

lib.delete = function (dir, file) {
	return new Promise(function(resolve, reject) {
		fs.unlink(nameFile(dir, file), err => {
			if (err) reject(err);
			resolve(true);
		});
	});
}


// list all items in a directory
// lib.list = (dir, cb) => {
// 	fs.readdir(nameFolder(dir), (err, data) => {
// 		if (err || !data || data.length === 0) return cb(err, data);
// 		cb(false, data.map(name => name.replace('.json', '')));
// 	});
// };


lib.list = function (dir) {
	return new Promise(function(resolve, reject) {
		fs.readdir(nameFolder(dir), (err, data) => {
			if (err || !data || data.length === 0) reject(err);
			else resolve(data.map(name => name.replace('.json', '')));
		});
	});
};

module.exports = lib;
