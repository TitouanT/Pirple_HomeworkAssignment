// dependencies
const handler = require('handlers/handler');
const User = require('user');
const errors = require('errors');


const userHandler = {};

userHandler.handler = handler.create(userHandler, ['post', 'get', 'put', 'delete']);

// the requirement in the body are: firstname, lastname, email, address, password
// the promise doesn't return any data
userHandler.post = data => {
	return new Promise(function(resolve, reject) {
		User.create(data.body)
		.then(user => resolve())
		.catch(reject)
	});
};

// to get data of a specified user, the given token must be owned by that user.
// since a token is by definition a way of authentification for a user
// we don't need to ask for the email, we know with the token which user we have to get
// asking for an email in the request query string would mean that we don't trust our token system.
userHandler.get = async data => {

	// first verify that the user is connected
	let token;
	try {
		token = await handler.requireToken(data);
	}
	catch (err) {
		return Promise.reject(err);
	}

	// get the user

	return new Promise(function(resolve, reject) {

		User.lookup(token.email())
		.then(user => resolve(user.get()))
		.catch(reject);
	});


};

// needed field: none
// optional field (minimum 1): firstname, lastname, address, password
userHandler.put = async data => {
	// first verify that the user is connected
	let token;

	try {
		token = await handler.requireToken(data);
	}
	catch (err) {
		return Promise.reject(err);
	}

	// lookup the user
	let user;
	try {
		user = await User.lookup(token.email());
	} catch (err) {
		return Promise.reject(err);
	}

	// then allow for changes
	const {firstname, lastname, address, password} = data.body;
	user.setFirstname(firstname);
	user.setLastname(lastname);
	user.setAddress(address);
	user.setPassword(password);

	try {
		await user.update()
	}
	catch (err) {
		return Promise.reject(err);
	}

	return Promise.resolve();
};



userHandler.delete = async data => {
	// first verify that the user is connected
	let token;
	try {
		token = await handler.requireToken(data);
	}
	catch (err) {
		return Promise.reject(err);
	}

	// lookup the user
	let user;
	try {
		user = await User.lookup(token.email());
	} catch (err) {
		return Promise.reject(err);
	}

	// delete associated data
	try {
		await user.deleteAssociatedData();
	}
	catch (err) {
		return Promise.reject(errors.delete('user associated data').eat(err));
	}

	// delete the user
	return user.delete();
};

module.exports = userHandler;
