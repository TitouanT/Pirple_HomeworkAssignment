// this is in common between all the handlers


//dependencies
const errors = require('errors');



const handler = {};

handler.create = function (recipient, methods) {
	return function (data) {
		if (methods.indexOf(data.method) === -1) return Promise.reject(errors.noMethod(data.method));
		// if (methods.indexOf(data.method) === -1) return Promise.reject({statusCode:400, body:{error:'not a valid method'}});

		return recipient[data.method](data);
	}
}





handler.requireToken = async function(data) {
	let token;

	try {
		token = await Token.lookup(data.headers.token)
	}
	catch (err) {
		return Promise.reject(err);
	}

	// at this point we have an existing token
	// we now have to verifiy that the token is not expired
	if (token.expired({deleteonexpiration:true})) return Promise.reject(errors.badToken());

	// now the token is known to be up to date so we update is expiration date because of a user action
	token.update().catch(console.log(error.update('token')));
	return Promise.resolve(token);
}

module.exports = handler;
