/*
All about the tokens
the tokens can be created with an email address
the tokens can be looked up by id
a token can give his data to a user in the form of a json string
a token can update itself
a token can tell if it's expired

a token can be written to the db
a token can be deleted from the db

*/

//dependencies
const idGenerator = require('idGenerator');
const datalib = require('data');
const errors = require('errors');

/*
a token has: an id, an expiration date and an email to know it's owner
*/
const tokenLifeSpan = 1000 * 60 * 60; // 1 hour
const nextExpirationDate = () => Date.now() + tokenLifeSpan;
function Token(data) {

	// getters
	this.id = () => data.id;
	this.email = () => data.email;
	this.expires = () => data.expires;

	// data to be sent to client
	this.get = () => {
		return {
			id:data.id,
			email:data.email,
			expires:data.expires
		};
	}

	// data to be saved in db (right now they are the same but it could change)
	this.data = () => JSON.stringify(data);


	this.update = () => {
		data.expires = nextExpirationDate();
		return datalib.update('tokens', data.id, this.data());
	};

	this.expired = function ({deleteonexpiration = false}={}) {
		const expired = data.expires < Date.now();

		// here I am breaking my code line because if an error ocurrs there, it will silently fail (almost because i am loging a little smth)
		if (expired && deleteonexpiration) this.delete().catch(err => console.log('error in deletion of expired token', err));
		// else this.update();
		return expired;
	};

	this.delete = function () {
		return Token.delete(data.id);
	};


}


// constructor function for new token
Token.create = function(email) {
	const id = idGenerator.generate(20);

	const token = new Token({id, email, expires:nextExpirationDate()});
	// const promess = datalib.create('tokens', id, token.data());

	return new Promise(function(resolve, reject) {
		datalib.create('tokens', id, token.data())
		.then(() => resolve(token))
		.catch(reject);
	});
	// return {token, db_write:promess};

}

// constructor function for an existing token in db
Token.lookup = function(tokenId) {
	// the tokenId is most of the time provided by a user so we need to validate it
	tokenId = idGenerator.validate(tokenId);
	if (!tokenId) return Promise.reject(errors.badToken());

	// look up in db
	return new Promise(function(resolve, reject) {
		datalib.read('tokens', tokenId)
		.then(tokenData => resolve(new Token(tokenData)))
		.catch(reject);
	});
}

// the deletion of a token does not require to read the token before
Token.delete = function (id) {
	return datalib.delete('tokens', id);
}

module.exports = {
	create:Token.create,
	lookup:Token.lookup,
	delete:Token.delete,
}
