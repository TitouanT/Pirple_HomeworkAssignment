// this error module will help to have consistent errors code and messages
const errors = {};
// const serverErrors = {};

function Error(code, msg, sysError=false) {

	this.code = code;
	this.msg = msg;
	this.sysError=sysError;

	// this.add = function (err) {
	// 	this.sysError.push(err);
	// }

	this.getSys = function () {
		return {code:this.code, msg:this.msg, sysError:this.sysError};
	};

	this.getClient = function () {
		return {code:this.code, msg:this.msg};
	}

	// this way, we can trace errors to the root and add context along the way
	this.eat = function (error) {
		this.sysError = error;
		return this;
	}

	// useful for logging purpose
	this.toString = function () {
		let sys;
		if (this.sysError instanceof Error) sys = this.sysError.toString();
		else sys = JSON.stringify(this.sysError);

		return `{code:${this.code},msg:${this.msg},sys:${sys}}`;
	}
}

// 400 bad request
errors.missingFields = (...fields) => new Error(400, `Missing required fields: [${fields.join(', ')}]`);
errors.authentification = () => new Error(400, 'Could not authenticate user');
errors.nothingToUpdate = () => new Error(400, 'No change requested');
errors.noMethod = (meth) => new Error(400, `"${meth}" is not a valid request method`);
errors.badToken = () => new Error(400, 'Bad Token');
// errors.missingOptionalFields = (cb, ...fields) => error(cb, 400, `Missing one of the optional fields: [${fields.join(', ')}]`);
// errors.tokenExpired          =  cb             => error(cb, 400, 'Token has expired');
// errors.alreadyExist          = (cb, msg)       => error(cb, 400, `${msg} already exists`);
// errors.checksLimit           = (cb, l)         => error(cb, 400, `The checks limit (${l}) has already been reached`);


// 403 token error
// errors.invalidToken          =  cb             => error(cb, 403, 'Invalid token in header');

// 404 not found
errors.notFound              = msg => new Error(404, `${msg} not found`);

// 405 method error
// errors.method                = (cb, msg)       => error(cb, 405, `${msg} is not an accepted method`);

// 500 server error
// errors.hash            =  cb             => error(cb, 500, 'Could not hash the password');
errors.create          = (msg)       => new Error(500, `Could not create ${msg}`);
errors.read          = (msg)       => new Error(500, `Could not read ${msg}`);
errors.update          = (msg)       => new Error(500, `Could not update ${msg}`);
errors.list          = (msg)       => new Error(500, `Could not list ${msg}`);
// errors.write          = (msg, err)       => error(cb, 500, `Could not write ${msg}`);
// errors.close          = (msg, err)       => error(cb, 500, `Could not close ${msg}`);
errors.delete          = (msg)       => new Error(500, `Could not delete ${msg}`);



// errors.serverErrors = serverErrors;

errors.Error = Error;
module.exports = errors;
