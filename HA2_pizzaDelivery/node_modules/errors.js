// this error module will help to have consistent errors code and messages
const errors = {};
// const serverErrors = {};

function error(code, msg, sysError={}) {
	return {code, msg, sysError};
}

// 400 bad request
errors.missingFields = (...fields) => error(400, `Missing required fields: [${fields.join(', ')}]`);
errors.authentification = () => error(400, 'Could not authenticate user');
errors.nothingToUpdate = () => error(400, 'No change requested');
// errors.missingOptionalFields = (cb, ...fields) => error(cb, 400, `Missing one of the optional fields: [${fields.join(', ')}]`);
// errors.tokenExpired          =  cb             => error(cb, 400, 'Token has expired');
// errors.alreadyExist          = (cb, msg)       => error(cb, 400, `${msg} already exists`);
// errors.checksLimit           = (cb, l)         => error(cb, 400, `The checks limit (${l}) has already been reached`);


// 403 token error
// errors.invalidToken          =  cb             => error(cb, 403, 'Invalid token in header');

// 404 not found
// errors.notFound              = (cb, msg)       => error(cb, 404, `${msg} not found`);

// 405 method error
// errors.method                = (cb, msg)       => error(cb, 405, `${msg} is not an accepted method`);

// 500 server error
// errors.hash            =  cb             => error(cb, 500, 'Could not hash the password');
// errors.create          = (msg, err)       => error(cb, 500, `Could not create ${msg}`);
// errors.update          = (msg, err)       => error(cb, 500, `Could not update ${msg}`);
// errors.write          = (msg, err)       => error(cb, 500, `Could not write ${msg}`);
// errors.close          = (msg, err)       => error(cb, 500, `Could not close ${msg}`);
// errors.delete          = (msg, err)       => error(cb, 500, `Could not delete ${msg}`);



// errors.serverErrors = serverErrors;
module.exports = errors;
