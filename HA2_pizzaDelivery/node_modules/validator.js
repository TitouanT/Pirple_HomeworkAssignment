/*

This file will handle all the arguments checks
I used the singleton DP

*/


function Validator() {
	let failed;
	let value;

	this.validate = function(val) {
		value = val;
		failed = false;
		return this;
	}

	this.end = function (cb) {
		if (cb) cb({failed, value});
		return !failed;
	};


	// validate the type
	this.type = function(typeStr) {
		failed = failed || typeof(value) !== typeStr;
		return this;
	}

	// sometimes strings need to be trimmed
	this.trim = function() {
		this.type('string');
		if (!failed) value = value.trim();
		return this;
	}

	// validate a property
	this.key = function(key, check) {
		failed = failed || value[key] === undefined || !check(value[name]);
		return this;
	}

	// validate a property
	this.check = function(check) {
		failed = failed || !check(value);
		return this;
	}

	// check on the length
	this.length = function(check) {
		failed = failed || !check(value.length);
		return this;
	}

	this.isArray = function() {
		return this.instanceof(Array);
	}

	//
	this.instanceof = function(object) {
		failed = failed || !(value instanceof object);
		return this;
	}
}




module.exports = new Validator();
